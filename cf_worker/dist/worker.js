(()=>{"use strict";Error;const n=(n="text/plain; charset=utf-8",t)=>(e,{headers:o={},...a}={})=>void 0===e||"Response"===e?.constructor.name?e:new Response(t?t(e):e,{headers:{"content-type":n,...o.entries?Object.fromEntries(o):o},...a}),t=(n("application/json; charset=utf-8",JSON.stringify),n("text/plain; charset=utf-8",String),n("text/html"),n("image/jpeg"),n("image/png"),n("image/webp"),(({base:n="",routes:t=[],...e}={})=>({__proto__:new Proxy({},{get:(e,o,a,r)=>"handle"==o?a.fetch:(e,...s)=>t.push([o.toUpperCase?.(),RegExp(`^${(r=(n+e).replace(/\/+(\/|$)/g,"$1")).replace(/(\/?\.?):(\w+)\+/g,"($1(?<$2>*))").replace(/(\/?\.?):(\w+)/g,"($1(?<$2>[^$1/]+?))").replace(/\./g,"\\.").replace(/(\/?)\*/g,"($1.*)?")}/*$`),s,r])&&a}),routes:t,...e,async fetch(n,...e){let o,a,r=new URL(n.url),s=n.query={__proto__:null};for(let[n,t]of r.searchParams)s[n]=s[n]?[].concat(s[n],t):t;for(let[s,i,c,d]of t)if((s==n.method||"ALL"==s)&&(a=r.pathname.match(i))){n.params=a.groups||{},n.route=d;for(let t of c)if(null!=(o=await t(n.proxy??n,...e)))return o}}}))());t.get("/",(async(n,t)=>{const e=await t.__STATIC_CONTENT.get("chat-interface.html");return e?new Response(e,{headers:{"Content-Type":"text/html","Cache-Control":"no-cache"}}):new Response("Not found",{status:404})})),t.get("/visualize",(async(n,t)=>{try{const n=(await t.VECTORIZE_INDEX.get({limit:100,include:["metadata","values"]})).map((n=>({id:n.id,embedding:n.values,metadata:n.metadata}))),e='// src/index.html\n<!DOCTYPE html>\n<html>\n<head>\n  <title>RAG Insights Visualization</title>\n  <script src="https://d3js.org/d3.v7.min.js"><\/script>\n  <style>\n    body { \n      font-family: system-ui, -apple-system, sans-serif;\n      margin: 0;\n      padding: 20px;\n      background: #f5f5f5;\n    }\n    h1 {\n      color: #2d3748;\n      margin-bottom: 20px;\n    }\n    #visualization {\n      background: white;\n      border-radius: 8px;\n      padding: 20px;\n      box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n    }\n    .node { \n      stroke: #fff;\n      stroke-width: 1.5px;\n      cursor: pointer;\n    }\n    .node:hover {\n      stroke: #000;\n      stroke-width: 2px;\n    }\n    .link { \n      stroke: #cbd5e0;\n      stroke-opacity: 0.6;\n    }\n    .tooltip {\n      position: absolute;\n      padding: 8px;\n      background: #2d3748;\n      color: white;\n      border-radius: 4px;\n      font-size: 12px;\n      pointer-events: none;\n      opacity: 0;\n      transition: opacity 0.2s;\n    }\n  </style>\n</head>\n<body>\n  <h1>RAG Insights Visualization</h1>\n  <div id="visualization"></div>\n  <div class="tooltip"></div>\n\n  <script>\n    // This will be replaced by the Worker\n    // const vectorData = [...];\n\n    // Create visualization\n    function createVisualization(data) {\n      const width = 800;\n      const height = 600;\n      const tooltip = d3.select(".tooltip");\n\n      // Create SVG\n      const svg = d3.select("#visualization")\n        .append("svg")\n        .attr("width", width)\n        .attr("height", height)\n        .attr("viewBox", [0, 0, width, height]);\n\n      // Create zoom behavior\n      const zoom = d3.zoom()\n        .scaleExtent([0.5, 5])\n        .on("zoom", (event) => {\n          g.attr("transform", event.transform);\n        });\n\n      // Add zoom to SVG\n      svg.call(zoom);\n\n      // Create main group for zoom\n      const g = svg.append("g");\n\n      // Force simulation\n      const simulation = d3.forceSimulation(data)\n        .force("charge", d3.forceManyBody().strength(-50))\n        .force("center", d3.forceCenter(width / 2, height / 2))\n        .force("collision", d3.forceCollide().radius(10));\n\n      // Create nodes\n      const node = g.append("g")\n        .selectAll("circle")\n        .data(data)\n        .join("circle")\n        .attr("class", "node")\n        .attr("r", 6)\n        .attr("fill", d => getColor(d))\n        .call(drag(simulation))\n        .on("mouseover", (event, d) => {\n          tooltip.style("opacity", 1)\n            .html(`ID: ${d.id}<br>Type: ${d.metadata?.type || \'Unknown\'}`);\n        })\n        .on("mousemove", (event) => {\n          tooltip\n            .style("left", (event.pageX + 10) + "px")\n            .style("top", (event.pageY + 10) + "px");\n        })\n        .on("mouseout", () => {\n          tooltip.style("opacity", 0);\n        });\n\n      // Update positions on simulation tick\n      simulation.on("tick", () => {\n        node\n          .attr("cx", d => d.x)\n          .attr("cy", d => d.y);\n      });\n\n      // Drag behavior\n      function drag(simulation) {\n        function dragstarted(event) {\n          if (!event.active) simulation.alphaTarget(0.3).restart();\n          event.subject.fx = event.subject.x;\n          event.subject.fy = event.subject.y;\n        }\n        \n        function dragged(event) {\n          event.subject.fx = event.x;\n          event.subject.fy = event.y;\n        }\n        \n        function dragended(event) {\n          if (!event.active) simulation.alphaTarget(0);\n          event.subject.fx = null;\n          event.subject.fy = null;\n        }\n        \n        return d3.drag()\n          .on("start", dragstarted)\n          .on("drag", dragged)\n          .on("end", dragended);\n      }\n\n      // Color generation based on metadata\n      function getColor(d) {\n        // You can customize this based on your metadata\n        const colors = d3.schemeCategory10;\n        const type = d.metadata?.type || \'unknown\';\n        const hash = type.split(\'\').reduce((acc, char) => {\n          return char.charCodeAt(0) + ((acc << 5) - acc);\n        }, 0);\n        return colors[Math.abs(hash) % colors.length];\n      }\n    }\n\n    // Initialize visualization when data is available\n    createVisualization(vectorData);\n  <\/script>\n</body>\n</html>'.replace("// const vectorData = [...];",`const vectorData = ${JSON.stringify(n)};`);return new Response(e,{headers:{"Content-Type":"text/html","Cache-Control":"no-cache"}})}catch(n){return Response.json({error:n.message},{status:500})}})),t.post("/chat",(async(n,t)=>{try{const{question:e}=await n.json(),o=await async function(){return new Array(1536).fill(0).map((()=>Math.random()))}(),a=function(n,t){if(!t.length)return"Colbie: Beep boop! I'm sorry, I couldn't find any information about that. ðŸ¤–";return`Colbie: Beep boop! Here's what I found about "${n}":\n\n${t.map((n=>n.metadata?.text||"")).filter(Boolean).join("\n\n")} âœ¨`}(e,await t.VECTORIZE_INDEX.query(o,{topK:3}));return Response.json({response:a})}catch(n){return Response.json({error:n.message},{status:500})}})),t.all("*",(()=>Response.json({error:"Not Found"},{status:404})))})();